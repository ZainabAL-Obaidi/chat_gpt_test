{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport Question from './components/Question'; // Updated import path\nimport Feedback from './components/Feedback'; // Updated import path\n\nexport default {\n  name: 'App',\n  components: {\n    Question,\n    Feedback\n  },\n  data() {\n    return {\n      questions: [],\n      currentQuestionIndex: 0,\n      showFeedback: false,\n      feedback: '',\n      apiKey: 'sk-proj-Zv0MnRWWefMhgO8sFgBvT3BlbkFJeqNoG4kQO7etaOWFH03M' // Your OpenAI API key\n    };\n  },\n  computed: {\n    question() {\n      return this.questions[this.currentQuestionIndex];\n    }\n  },\n  created() {\n    this.fetchQuestion();\n  },\n  methods: {\n    fetchQuestion() {\n      // Fetch a question from ChatGPT API using your API key\n      axios.post('https://api.openai.com/v1/engines/davinci-codex/completions', {\n        prompt: 'Generate a multiple-choice question.',\n        max_tokens: 50\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        const questionText = response.data.choices[0].text.trim(); // Extract the generated question\n        const options = ['a)', 'b)', 'c)', 'd)']; // Predefined options for simplicity\n        const question = {\n          text: questionText,\n          options: options,\n          answer: 'a' // Assuming the correct answer is always the first option for simplicity\n        };\n        this.questions.push(question);\n      }).catch(error => {\n        console.error('Error fetching question:', error);\n      });\n    },\n    handleAnswer(selectedAnswer) {\n      // Check if answer is correct (for demonstration purposes)\n      if (selectedAnswer === this.question.answer) {\n        console.log('Correct!');\n      } else {\n        console.log('Incorrect!');\n      }\n\n      // Move to the next question or show feedback if all questions are answered\n      if (this.currentQuestionIndex < this.questions.length - 1) {\n        this.currentQuestionIndex++;\n      } else {\n        this.showFeedback = true;\n        this.fetchFeedback(); // Fetch feedback when all questions are answered\n      }\n    },\n    fetchFeedback() {\n      // Simulating fetching feedback from an API (can be replaced with actual API call)\n      // In this simplified example, feedback is hardcoded\n      this.feedback = \"Good job! You answered all questions.\";\n    }\n  }\n};","map":{"version":3,"names":["axios","Question","Feedback","name","components","data","questions","currentQuestionIndex","showFeedback","feedback","apiKey","computed","question","created","fetchQuestion","methods","post","prompt","max_tokens","headers","then","response","questionText","choices","text","trim","options","answer","push","catch","error","console","handleAnswer","selectedAnswer","log","length","fetchFeedback"],"sources":["/home/kurs/chatgpt-quiz-app/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div v-if=\"!showFeedback\">\n      <Question v-if=\"question\" :question=\"question\" @answer=\"handleAnswer\" />\n    </div>\n    <div v-else>\n      <Feedback :feedback=\"feedback\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport Question from './components/Question'; // Updated import path\nimport Feedback from './components/Feedback'; // Updated import path\n\nexport default {\n  name: 'App',\n  components: {\n    Question,\n    Feedback,\n  },\n  \n  data() {\n    return {\n      questions: [],\n      currentQuestionIndex: 0,\n      showFeedback: false,\n      feedback: '',\n      apiKey: 'sk-proj-Zv0MnRWWefMhgO8sFgBvT3BlbkFJeqNoG4kQO7etaOWFH03M', // Your OpenAI API key\n    };\n  },\n  computed: {\n    question() {\n      return this.questions[this.currentQuestionIndex];\n    },\n  },\n  created() {\n    this.fetchQuestion();\n  },\n  methods: {\n    fetchQuestion() {\n      // Fetch a question from ChatGPT API using your API key\n      axios.post('https://api.openai.com/v1/engines/davinci-codex/completions', {\n        prompt: 'Generate a multiple-choice question.',\n        max_tokens: 50,\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n      })\n      .then(response => {\n        const questionText = response.data.choices[0].text.trim(); // Extract the generated question\n        const options = ['a)', 'b)', 'c)', 'd)']; // Predefined options for simplicity\n        const question = {\n          text: questionText,\n          options: options,\n          answer: 'a', // Assuming the correct answer is always the first option for simplicity\n        };\n        this.questions.push(question);\n      })\n      .catch(error => {\n        console.error('Error fetching question:', error);\n      });\n    },\n    handleAnswer(selectedAnswer) {\n      // Check if answer is correct (for demonstration purposes)\n      if (selectedAnswer === this.question.answer) {\n        console.log('Correct!');\n      } else {\n        console.log('Incorrect!');\n      }\n\n      // Move to the next question or show feedback if all questions are answered\n      if (this.currentQuestionIndex < this.questions.length - 1) {\n        this.currentQuestionIndex++;\n      } else {\n        this.showFeedback = true;\n        this.fetchFeedback(); // Fetch feedback when all questions are answered\n      }\n    },\n    fetchFeedback() {\n      // Simulating fetching feedback from an API (can be replaced with actual API call)\n      // In this simplified example, feedback is hardcoded\n      this.feedback = \"Good job! You answered all questions.\";\n    },\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Arial, sans-serif;\n  text-align: center;\n  margin-top: 20px;\n}\n</style>\n"],"mappings":";AAYA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,QAAO,MAAO,uBAAuB,EAAE;AAC9C,OAAOC,QAAO,MAAO,uBAAuB,EAAE;;AAE9C,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVH,QAAQ;IACRC;EACF,CAAC;EAEDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,oBAAoB,EAAE,CAAC;MACvBC,YAAY,EAAE,KAAK;MACnBC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE,0DAA0D,CAAE;IACtE,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACN,SAAS,CAAC,IAAI,CAACC,oBAAoB,CAAC;IAClD;EACF,CAAC;EACDM,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;EACtB,CAAC;EACDC,OAAO,EAAE;IACPD,aAAaA,CAAA,EAAG;MACd;MACAd,KAAK,CAACgB,IAAI,CAAC,6DAA6D,EAAE;QACxEC,MAAM,EAAE,sCAAsC;QAC9CC,UAAU,EAAE;MACd,CAAC,EAAE;QACDC,OAAO,EAAE;UACP,eAAe,EAAE,UAAU,IAAI,CAACT,MAAM,EAAE;UACxC,cAAc,EAAE;QAClB;MACF,CAAC,EACAU,IAAI,CAACC,QAAO,IAAK;QAChB,MAAMC,YAAW,GAAID,QAAQ,CAAChB,IAAI,CAACkB,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC,EAAE;QAC3D,MAAMC,OAAM,GAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE;QAC1C,MAAMd,QAAO,GAAI;UACfY,IAAI,EAAEF,YAAY;UAClBI,OAAO,EAAEA,OAAO;UAChBC,MAAM,EAAE,GAAG,CAAE;QACf,CAAC;QACD,IAAI,CAACrB,SAAS,CAACsB,IAAI,CAAChB,QAAQ,CAAC;MAC/B,CAAC,EACAiB,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD,CAAC,CAAC;IACJ,CAAC;IACDE,YAAYA,CAACC,cAAc,EAAE;MAC3B;MACA,IAAIA,cAAa,KAAM,IAAI,CAACrB,QAAQ,CAACe,MAAM,EAAE;QAC3CI,OAAO,CAACG,GAAG,CAAC,UAAU,CAAC;MACzB,OAAO;QACLH,OAAO,CAACG,GAAG,CAAC,YAAY,CAAC;MAC3B;;MAEA;MACA,IAAI,IAAI,CAAC3B,oBAAmB,GAAI,IAAI,CAACD,SAAS,CAAC6B,MAAK,GAAI,CAAC,EAAE;QACzD,IAAI,CAAC5B,oBAAoB,EAAE;MAC7B,OAAO;QACL,IAAI,CAACC,YAAW,GAAI,IAAI;QACxB,IAAI,CAAC4B,aAAa,CAAC,CAAC,EAAE;MACxB;IACF,CAAC;IACDA,aAAaA,CAAA,EAAG;MACd;MACA;MACA,IAAI,CAAC3B,QAAO,GAAI,uCAAuC;IACzD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}