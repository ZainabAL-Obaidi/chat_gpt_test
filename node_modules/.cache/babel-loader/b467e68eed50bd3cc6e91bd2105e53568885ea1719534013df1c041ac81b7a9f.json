{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Welcome to My Vue.js Quiz App!\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createCommentVNode(\" Other components or content here \")]);\n}","map":{"version":3,"names":["id","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_createCommentVNode"],"sources":["/home/kurs/chatgpt-quiz-app/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>Welcome to My Vue.js Quiz App!</h1>\n    <!-- Other components or content here -->\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport QuestionComponent from './components/QuestionComponent';\nimport FeedbackComponent from './components/FeedbackComponent';\n\nexport default {\n  name: 'App',\n  components: {\n    QuestionComponent,\n    FeedbackComponent,\n  },\n\n  data() {\n    return {\n      questions: [],\n      currentQuestionIndex: 0,\n      showFeedback: false,\n      feedback: '',\n      apiKey: 'sk-proj-Zv0MnRWWefMhgO8sFgBvT3BlbkFJeqNoG4kQO7etaOWFH03M', // Your OpenAI API key\n    };\n  },\n  computed: {\n    question() {\n      return this.questions[this.currentQuestionIndex];\n    },\n  },\n  created() {\n    this.fetchQuestion();\n  },\n  methods: {\n  fetchQuestion() {\n    axios.post('https://api.openai.com/v1/engines/davinci-codex/completions', {\n      prompt: 'Generate a multiple-choice question.',\n      max_tokens: 50,\n    }, {\n      headers: {\n        'Authorization': `Bearer ${this.apiKey}`,\n        'Content-Type': 'application/json',\n      },\n    })\n    .then(response => {\n      console.log('API Response:', response.data);\n      const questionText = response.data.choices[0].text.trim();\n      const options = ['a)', 'b)', 'c)', 'd)'];\n      const question = {\n        text: questionText,\n        options: options,\n        answer: 'a',\n      };\n      this.questions.push(question);\n      console.log('Questions:', this.questions); // Verify questions array\n    })\n    .catch(error => {\n      console.error('Error fetching question:', error);\n    });\n  },\n}\n\n};\n</script>\n\n<style>\n#app {\n  font-family: Arial, sans-serif;\n  text-align: center;\n  margin-top: 20px;\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;gCACXC,mBAAA,CAAuC,YAAnC,gCAA8B;;uBADpCC,mBAAA,CAGM,OAHNC,UAGM,GAFJC,UAAuC,EACvCC,mBAAA,sCAAyC,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}