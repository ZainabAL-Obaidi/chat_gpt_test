{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_QuestionComponent = _resolveComponent(\"QuestionComponent\");\n  const _component_FeedbackComponent = _resolveComponent(\"FeedbackComponent\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [!$data.showFeedback ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [$options.question ? (_openBlock(), _createBlock(_component_QuestionComponent, {\n    key: 0,\n    question: $options.question,\n    onAnswer: $options.handleAnswer\n  }, null, 8 /* PROPS */, [\"question\", \"onAnswer\"])) : _createCommentVNode(\"v-if\", true)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createVNode(_component_FeedbackComponent, {\n    feedback: $data.feedback\n  }, null, 8 /* PROPS */, [\"feedback\"])]))]);\n}","map":{"version":3,"names":["id","key","_createElementBlock","_hoisted_1","$data","showFeedback","_hoisted_2","$options","question","_createBlock","_component_QuestionComponent","onAnswer","handleAnswer","_createCommentVNode","_hoisted_3","_createVNode","_component_FeedbackComponent","feedback"],"sources":["/home/kurs/chatgpt-quiz-app/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div v-if=\"!showFeedback\">\n      <QuestionComponent v-if=\"question\" :question=\"question\" @answer=\"handleAnswer\" />\n    </div>\n    <div v-else>\n      <FeedbackComponent :feedback=\"feedback\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport QuestionComponent from './components/QuestionComponent'; // Updated import path\nimport FeedbackComponent from './components/FeedbackComponent'; // Updated import path\n\nexport default {\n  name: 'App',\n  components: {\n    QuestionComponent,\n    FeedbackComponent,\n  },\n\n  data() {\n    return {\n      questions: [],\n      currentQuestionIndex: 0,\n      showFeedback: false,\n      feedback: '',\n      apiKey: 'sk-proj-Zv0MnRWWefMhgO8sFgBvT3BlbkFJeqNoG4kQO7etaOWFH03M', // Your OpenAI API key\n    };\n  },\n  computed: {\n    question() {\n      return this.questions[this.currentQuestionIndex];\n    },\n  },\n  created() {\n    this.fetchQuestion();\n  },\n  methods: {\n    fetchQuestion() {\n      // Fetch a question from ChatGPT API using your API key\n      axios.post('https://api.openai.com/v1/engines/davinci-codex/completions', {\n        prompt: 'Generate a multiple-choice question.',\n        max_tokens: 50,\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n      })\n      .then(response => {\n        const questionText = response.data.choices[0].text.trim(); // Extract the generated question\n        const options = ['a)', 'b)', 'c)', 'd)']; // Predefined options for simplicity\n        const question = {\n          text: questionText,\n          options: options,\n          answer: 'a', // Assuming the correct answer is always the first option for simplicity\n        };\n        this.questions.push(question);\n      })\n      .catch(error => {\n        console.error('Error fetching question:', error);\n      });\n    },\n    handleAnswer(selectedAnswer) {\n      // Check if answer is correct (for demonstration purposes)\n      if (selectedAnswer === this.question.answer) {\n        console.log('Correct!');\n      } else {\n        console.log('Incorrect!');\n      }\n\n      // Move to the next question or show feedback if all questions are answered\n      if (this.currentQuestionIndex < this.questions.length - 1) {\n        this.currentQuestionIndex++;\n      } else {\n        this.showFeedback = true;\n        this.fetchFeedback(); // Fetch feedback when all questions are answered\n      }\n    },\n    fetchFeedback() {\n      // Simulating fetching feedback from an API (can be replaced with actual API call)\n      // In this simplified example, feedback is hardcoded\n      this.feedback = \"Good job! You answered all questions.\";\n    },\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Arial, sans-serif;\n  text-align: center;\n  margin-top: 20px;\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;EADfC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;;uBACEC,mBAAA,CAOM,OAPNC,UAOM,G,CANQC,KAAA,CAAAC,YAAY,I,cAAxBH,mBAAA,CAEM,OAJVI,UAAA,GAG+BC,QAAA,CAAAC,QAAQ,I,cAAjCC,YAAA,CAAiFC,4BAAA;IAHvFT,GAAA;IAG0CO,QAAQ,EAAED,QAAA,CAAAC,QAAQ;IAAGG,QAAM,EAAEJ,QAAA,CAAAK;uDAHvEC,mBAAA,e,oBAKIX,mBAAA,CAEM,OAPVY,UAAA,GAMMC,YAAA,CAA0CC,4BAAA;IAAtBC,QAAQ,EAAEb,KAAA,CAAAa;EAAQ,sC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}