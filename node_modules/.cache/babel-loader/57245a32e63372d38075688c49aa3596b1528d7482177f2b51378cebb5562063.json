{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Welcome to My Vue.js Quiz App!\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_QuestionComponent = _resolveComponent(\"QuestionComponent\");\n  const _component_FeedbackComponent = _resolveComponent(\"FeedbackComponent\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, !$data.showFeedback ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [$options.question ? (_openBlock(), _createBlock(_component_QuestionComponent, {\n    key: 0,\n    question: $options.question,\n    onAnswer: _ctx.handleAnswer\n  }, null, 8 /* PROPS */, [\"question\", \"onAnswer\"])) : _createCommentVNode(\"v-if\", true)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createVNode(_component_FeedbackComponent, {\n    feedback: $data.feedback\n  }, null, 8 /* PROPS */, [\"feedback\"])]))]);\n}","map":{"version":3,"names":["id","_createElementVNode","key","_createElementBlock","_hoisted_1","_hoisted_2","$data","showFeedback","_hoisted_3","$options","question","_createBlock","_component_QuestionComponent","onAnswer","_ctx","handleAnswer","_createCommentVNode","_hoisted_4","_createVNode","_component_FeedbackComponent","feedback"],"sources":["/home/kurs/chatgpt-quiz-app/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>Welcome to My Vue.js Quiz App!</h1>\n    <div v-if=\"!showFeedback\">\n      <QuestionComponent v-if=\"question\" :question=\"question\" @answer=\"handleAnswer\" />\n    </div>\n    <div v-else>\n      <FeedbackComponent :feedback=\"feedback\" />\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport axios from 'axios';\nimport QuestionComponent from './components/QuestionComponent'; // Updated import path\nimport FeedbackComponent from './components/FeedbackComponent'; // Updated import path\n\nexport default {\n  name: 'App',\n  components: {\n    QuestionComponent,\n    FeedbackComponent,\n  },\n\n  data() {\n    return {\n      questions: [],\n      currentQuestionIndex: 0,\n      showFeedback: false,\n      feedback: '',\n      apiKey: 'sk-proj-Zv0MnRWWefMhgO8sFgBvT3BlbkFJeqNoG4kQO7etaOWFH03M', // Your OpenAI API key\n    };\n  },\n  computed: {\n    question() {\n      return this.questions[this.currentQuestionIndex];\n    },\n  },\n  created() {\n    this.fetchQuestion();\n  },\n  methods: {\n  fetchQuestion() {\n    axios.post('https://api.openai.com/v1/engines/davinci-codex/completions', {\n      prompt: 'Generate a multiple-choice question.',\n      max_tokens: 50,\n    }, {\n      headers: {\n        'Authorization': `Bearer ${this.apiKey}`,\n        'Content-Type': 'application/json',\n      },\n    })\n    .then(response => {\n      console.log('API Response:', response.data);\n      const questionText = response.data.choices[0].text.trim();\n      const options = ['a)', 'b)', 'c)', 'd)'];\n      const question = {\n        text: questionText,\n        options: options,\n        answer: 'a',\n      };\n      this.questions.push(question);\n      console.log('Questions:', this.questions); // Verify questions array\n    })\n    .catch(error => {\n      console.error('Error fetching question:', error);\n    });\n  },\n}\n\n};\n</script>\n\n<style>\n#app {\n  font-family: Arial, sans-serif;\n  text-align: center;\n  margin-top: 20px;\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;gCACXC,mBAAA,CAAuC,YAAnC,gCAA8B;;EAFtCC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;;uBACEC,mBAAA,CAQM,OARNC,UAQM,GAPJC,UAAuC,E,CAC3BC,KAAA,CAAAC,YAAY,I,cAAxBJ,mBAAA,CAEM,OALVK,UAAA,GAI+BC,QAAA,CAAAC,QAAQ,I,cAAjCC,YAAA,CAAiFC,4BAAA;IAJvFV,GAAA;IAI0CQ,QAAQ,EAAED,QAAA,CAAAC,QAAQ;IAAGG,QAAM,EAAEC,IAAA,CAAAC;uDAJvEC,mBAAA,e,oBAMIb,mBAAA,CAEM,OARVc,UAAA,GAOMC,YAAA,CAA0CC,4BAAA;IAAtBC,QAAQ,EAAEd,KAAA,CAAAc;EAAQ,sC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}